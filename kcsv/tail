
//go:embed readme
var help []byte

const separators = ",;|\t "

func main() {
	kinit()
	a := os.Args[1:]
	if len(a) == 0 || a[0] == "-h" {
		os.Stderr.Write(help)
		os.Exit(1)
	}
	
	hdr := len(a) > 1 && a[len(a)-1] == "-h"
	if hdr {
		a = a[:len(a)-1]
	}	

	fm, fi := "", ""
	if len(a) < 2 {
		fi = a[0]
		a = a[1:]
	} else {
		fm, fi = a[0], a[1]
		a = a[2:]
	}
	l := ""
	if len(a) > 0 {
		l = a[len(a)-1]
		if l == "-t" || l == "-b" {
			a = a[:len(a)-1]
		} else {
			l = ""
		}
	}


	b, e := os.ReadFile(fi)
	if e != nil {
		fatal("cannot read csv file: "+fi)
	}

	x, f := kcsv(fm, b, hdr)
	if x == 0 {
		return
	}

	
	if l == "-b" || l == "-t" {
		out := bufio.NewWriter(os.Stdout)
		if l == "-b" {
			f.binary(out, x)
		} else {
			f.serialize(out, x)
		}
		out.Flush()
		return
	}

	Asn(sc(Ku(120)), x) // x:(..)
	for i, s := range a {
		if strings.HasSuffix(s, ".k") {
			x := KC(s)
			dofile(x, readfile(rx(x)))
		} else if s == "-e" {
			if i == len(a) - 1 {
				os.Exit(0)
			}
			repl(KC(strings.ReplaceAll(a[1+i], "Â°", "'")))
			os.Exit(0)
		} else {
			os.Stderr.Write(help)
			fatal("cannot parse argument: "+s)
		}
	}

	// repl
	write(Ku(2932601077199979)) // "ktye/k\n"
        store()
        for {
                write(Ku(32))
                x := readfile(mk(18,0))
                try(x)
        }
}

func kcsv(fm string, b []byte, hdr bool) (uint64, format) {
	var f format
	f, b = parseFormat(fm, b)

	r := csv.NewReader(bytes.NewReader(b))
	r.Comma = rune(f.s)
	r.Comment = '#'
	r.TrimLeadingSpace = true
	r.ReuseRecord = true

	v, e := r.Read()
	if e != nil {
		fatal(e.Error())
	}
	
	if hdr {
		w := make([]string, len(v))
		copy(w, v)
		v, e = r.Read()
		if e != nil {
			v = nil
		}
		colnames(w, v)
		return 0, f
	}

	if len(f.t) == 0 {
		f.t = make([]int32, len(v))
		f.i = make([]int, len(v))
		for i := range f.i {
			f.t[i] = Ct //default
			f.i[i] = i
		}
		f.columns = len(v)
	}
	f.v = make([]uint64, len(f.t))
	for i, t := range f.t {
		if t == Ct {
			f.v[i] = mk(Lt, 0)
		} else {
			f.v[i] = mk(t, 0)
		}
	}
	f.line++
	f.push(v)

	for {
		f.line++
		v, e = r.Read()
		if e == io.EOF {
			return f.list(), f
		} else if e != nil {
			f.err(e.Error())
		} else if len(v) == 0 {
			continue
		}
		f.push(v)
	}
}
func (f *format) push(v []string) {
	f.line++
	if len(v) < f.columns {
		f.err("not enough columns: " + strconv.Itoa(len(v)) + " not " + strconv.Itoa(f.columns))
	}
	for i, t := range f.t {
		j := f.i[i]
		switch t {
		case It:
			f.v[i] = cat1(f.v[i], kint(v[j]))
		case St:
			f.v[i] = cat1(f.v[i], sc(KC(v[j])))
		case Ft:
			f.v[i] = cat1(f.v[i], Kf(flt(v[j])))
		case Zt:
			f.v[i] = cat1(f.v[i], kmpl(flt(v[j]), flt(v[1+j])))
		default:
			f.v[i] = ucat(f.v[i], Enl(KC(v[j])))
		}
	}
}
func kint(s string) uint64 {
	n, e := strconv.ParseInt(s, 10, 32)
	if e != nil {
		return Ki(0)
	} else {
		return Ki(int32(n))
	}
}
func flt(s string) float64 {
	n, e := strconv.ParseFloat(strings.ReplaceAll(s, ",", "."), 64)
	if e != nil {
		return math.NaN()
	} else {
		return n
	}
}
func kmpl(r, a float64) uint64 { 
	z := cmplx.Rect(r, a*math.Pi/180.0)
	return Kz(real(z), imag(z))
}

func (f *format) list() uint64 {
	r := mk(Lt, 0)
	for _, x := range f.v {
		r = Cat(r, Enl(x))		
	}
	return r
}
func (f *format) err(s string) {
	os.Stderr.Write([]byte(strconv.Itoa(f.line)))
	os.Stderr.Write([]byte(": "+s+"\n"))
	os.Exit(1)
}


type format struct {
	s byte
	t []int32
	i []int
	v []uint64
	columns int
	line int
}

func parseFormat(f string, b []byte) (format, []byte) {
	var h []byte
	var r format
	b = bytes.TrimSpace(b)
	if i := bytes.Index(b, []byte{10}); i > 0 {
		h = b[:i]	
	} else {
		fatal("csv file contains no newline")
	}

	// separator
	r.s = ' '
	if len(f) > 0 && strings.IndexByte(separators, f[0]) >= 0 {
		r.s, f = f[0], f[1:]
	} else {
		r.s = autosep(h)
	}
	if r.s == ' ' {
		sp := regexp.MustCompile(" +")
		st := regexp.MustCompile("(?m) *$")
		b = sp.ReplaceAll(b, []byte{32})
		b = st.ReplaceAll(b, []byte{})
	}

	// skip header
	if i := strings.Index(f, "h"); i > 0 {
		nh, e := strconv.Atoi(f[:i])
		if e != nil || nh < 0 {
			fatal("csv format: cannot read #h: "+f)
		}
		for i := 0; i<nh; i++ {
			if j := bytes.IndexByte(b, 10); j >= 0 {
				b = b[1+j:]
			}
		}
		f = f[1+i:]
		r.line++
	}

	cur := 0
	tm := map[byte]int32{ 'c': Ct, 'i': It, 's': St, 'f': Ft, 'z': Zt, }
	for len(f) > 0 {
		i := strings.IndexAny(f, "ifcsz")
		if i < 0 {
			fatal("csv format: cannot read type: "+f)
		}
		if i > 0 {
			n, e := strconv.Atoi(f[:i])
			if e != nil {
				fatal("csv format: cannot parse int: "+f)
			}
			cur = n
		}
		r.i = append(r.i, cur)
		r.t = append(r.t, tm[f[i]])
		if f[i] == 'z' {
			cur++
		}
		f = f[1+i:]
		cur++
	}
	r.columns = cur
	return r, b
}
func autosep(h []byte) byte {
	a, m, j := separators, -1, 0
	for i, c := range a {
		if n := bytes.Count(h, []byte{byte(c)}); n > m {
			m, j = n, i
		}
	}
	return a[j]
}

func colnames(v, w []string) {
	tw := tabwriter.NewWriter(os.Stdout, 2, 1, 2, ' ', 0)
	for i := range v {
		tw.Write([]byte(strconv.Itoa(i)))
		tw.Write([]byte{'\t'})
		tw.Write([]byte(v[i]))
		tw.Write([]byte{'\t'})
		if w != nil && len(w) > i {
			tw.Write([]byte(w[i]+".."))
		}
		tw.Write([]byte{'\n'})
	}
	tw.Flush()
}
func fatal(s string) {
	os.Stderr.Write([]byte(s))
	os.Stderr.Write([]byte{10})
	os.Exit(1)
}

func KC(s string) uint64 {
	r := mk(18, int32(len(s)))
	copy(Bytes[int32(r):], []byte(s))
	return r
}

func (f *format) binary(w io.Writer, x uint64) {
	dx(Val(KC("`pack:{w:{(`c@,#x),x};($t),$[`s~t:@x;`pack@$x;x~*x;w `c@,x;`L~@x;(`c@,#x),,/`pack@'x;(@x)?`D`T;(`pack@.x),`pack@!x;`S~t;,/`pack@$x;w `c x]}")))
	y := Atx(sc(KC("pack")), x) // `pack@
	wCK(w, y)
}

func wCK(w io.Writer, x uint64){dx(x); w.Write(Bytes[int32(x):int32(x)+nn(x)])}
func (f *format) serialize(w io.Writer, x uint64) { 
	n := nn(x)
	w.Write([]byte("x:("))
	for i := int32(0); i<n; i++ {
		//Out(ati(x,i))
		wCK(w, Kst(ati(rx(x), i)))
		if i<n-1 {
			w.Write([]byte("\n "))
		}
	}
	w.Write([]byte(")\n"))
	dx(x)
}

/*
func CK(x uint64) string { dx(x); return string(Bytes[int32(x) : int32(x)+nn(x)]) }
func KL(v []string) uint64 {
	r := mk(23, int32(len(v)))
	p := int32(r)
	for i := range v {
		SetI64(p+8*int32(i), int64(KC(v[i])))
	}
	return r
}
func eval(x uint64) string {
	return strs(exec(rx(x)))
}
func writes(x []string) { out.WriteString(strings.Join(x, " ") + "\n") }
func strs(x uint64) (r string) {
	p := int32(x)
	t := tp(x)
	switch t {
	case 2:
		r = string(p)
	case 3:
		r = strconv.Itoa(int(p))
	case 4:
		r = CK(cs(rx(x)))
	case 5:
		r = ftoa(F64(p))
	case 6:
		r = absang(complex(F64(p), F64(p+8)))
	case 18:
		r = CK(rx(x)) // C
	case 19, 20, 21, 22, 23:
		r = each(x) // IFSZL
	}
	dx(x)
	return r
}
func each(x uint64) string {
	n := nn(x)
	r := make([]string, n)
	for i := int32(0); i < n; i++ {
		r[i] = strs(ati(rx(x), i))
	}
	return strings.Join(r, " ")
}
func ftoa(f float64) string { return strconv.FormatFloat(f, 'g', 6, 64) }
func absang(z complex128) string {
	ang := 180.0 / math.Pi * cmplx.Phase(z)
	if ang < 0 {
		ang += 360.0
	}
	return ftoa(cmplx.Abs(z)) + " " + ftoa(ang)
}
*/
